function detect-fisher-files -d "Detect Fisher-managed vs custom files and generate gitignore rules"
    argparse update-gitignore -- $argv
    or return

    function _read_fish_plugins
        set -l plugins_file $__fish_config_dir/fish_plugins
        set -l plugins

        if test -f $plugins_file
            for line in (cat $plugins_file)
                # Skip comments and empty lines
                if test -n "$line" && not string match -q '#*' $line
                    # Extract plugin name from github path like "jorgebucaran/fisher"
                    set -l plugin_name (string split '/' $line)[-1]
                    set -a plugins $plugin_name
                end
            end
        end

        echo $plugins
    end

    function _is_fisher_managed -a file_path
        # Get all Fisher file tracking variables
        set -l fisher_vars (set --names | string match --regex '^_fisher_.+_files$')

        # Collect all Fisher-managed file paths
        set -l fisher_files
        for var in $fisher_vars
            set -a fisher_files $$var
        end

        # Convert paths to relative paths from fish config dir for comparison
        set -l rel_path (string replace $__fish_config_dir/ '' $file_path)
        set -l abs_path $file_path

        # Check if this file is in Fisher's tracked files
        for fisher_file in $fisher_files
            # Handle both absolute paths and paths with ~ 
            set -l expanded_path (string replace '~' $HOME $fisher_file)
            set -l fisher_rel_path (string replace $__fish_config_dir/ '' $expanded_path)

            if test "$rel_path" = "$fisher_rel_path" || test "$abs_path" = "$expanded_path"
                return 0
            end
        end

        return 1
    end

    function _scan_fish_config
        set -l fisher_files
        set -l custom_files

        # Scan all .fish files
        for file in $__fish_config_dir/**/*.fish
            if test -f $file
                set -l rel_path (string replace $__fish_config_dir/ '' $file)

                if _is_fisher_managed $file
                    set -a fisher_files $rel_path
                else
                    set -a custom_files $rel_path
                end
            end
        end

        # Also include Python files (like __bass.py)
        for file in $__fish_config_dir/**/*.py
            if test -f $file
                set -l rel_path (string replace $__fish_config_dir/ '' $file)
                set -a fisher_files $rel_path
            end
        end

        echo "FISHER_MANAGED: $fisher_files"
        echo "CUSTOM_FILES: $custom_files"
    end

    function _output_fisher_files
        set -l scan_result (_scan_fish_config)
        set -l fisher_files

        # Parse scan results
        for line in $scan_result
            if string match -q 'FISHER_MANAGED: *' $line
                set fisher_files (string replace 'FISHER_MANAGED: ' '' $line | string split ' ')
                break
            end
        end

        echo "# START detect-fisher-files"
        echo "# Fisher-managed files (add these to .gitignore)"
        echo "# Generated by detect-fisher-files function"

        for file in $fisher_files
            if test -n "$file"
                echo ".config/fish/$file"
            end
        end

        echo "# END detect-fisher-files"
    end

    # Main function logic
    if set -q _flag_update_gitignore
        # Update global gitignore file
        set -l gitignore_file "$HOME/.config/git/gitignore"

        if test -f $gitignore_file
            # Remove existing detect-fisher-files block
            sed -i '/# START detect-fisher-files/,/# END detect-fisher-files/d' $gitignore_file
        end

        # Append new block
        _output_fisher_files >> $gitignore_file
        echo "Updated $gitignore_file with Fisher-managed files"
    else
        # Just output gitignore entries
        _output_fisher_files
    end
end
